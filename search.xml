<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Makefile基础规则</title>
      <link href="/2023/04/10/Makefile%E5%9F%BA%E7%A1%80%E8%A7%84%E5%88%99/"/>
      <url>/2023/04/10/Makefile%E5%9F%BA%E7%A1%80%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="程序编译过程"><a href="#程序编译过程" class="headerlink" title="程序编译过程"></a>程序编译过程</h1><p>程序从源代码到可执行文件一般来说需要经过以下几个过程</p><ul><li>预处理（<code>Preprocessing</code>）：对源代码中的所有预处理指令（如<code>#include</code>、<code>#define</code>等）、注释、条件编译等进行处理，生成<code>.i</code>文件。在<code>GCC</code>中使用<code>-E</code>参数来指导编译器仅进行预处理操作。</li><li>编译（Compile）：对预处理后的源文件进行一系列语法分析、语义分析、词法分析及优化后生成相对应的包含汇编指令的<code>.s</code>文件。在<code>GCC</code>中使用<code>-S</code>参数来指导编译器只进行到编译操作。另外有时编译也指预处理、编译、汇编三个过程的集合或整个从源代码到可执行文件过程的集合。</li><li>汇编（Compilation）：将汇编代码转换为机器代码，生成<code>.o</code>文件，此时的<code>.o</code>文件为纯二进制文件。在<code>GCC</code>中使用<code>-c</code>参数来指导编译器只进行到汇编操作。</li><li>链接（Link）：将所有的<code>.o</code>文件和库（静态库）链接到一起，生成可执行文件（<code>Windows</code>下为<code>.exe</code>文件，<code>Linux</code>下为<code>.out</code>文件）。</li></ul><p>以上的所有过程的集合称为构建（<code>bulid</code>）。</p><h1 id="make和Makefile"><a href="#make和Makefile" class="headerlink" title="make和Makefile"></a>make和Makefile</h1><p><code>make</code>是一个自动化的编译和构建工具，它依赖于<code>Makefile</code>或者<code>makefile</code>文件，该文件中包含了编译和构建的指令以及依赖关系。</p><h1 id="Makefile基本格式"><a href="#Makefile基本格式" class="headerlink" title="Makefile基本格式"></a>Makefile基本格式</h1><p>最简单的<code>Makefile</code>由一系列规则组成，每条规则的格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;target&gt;...:&lt;prerequisites&gt;...</span><br><span class="line">&lt;recipe&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>target</code>用于指定目标动作或者可执行文件名称，<code>prerequisites</code>为先决条件，可以是一个或多个文件，当<code>prerequisites</code>不存在或更新时间晚于<code>target</code>时，会再次执行其下的<code>recipe</code>。</p><p><code>recipe</code>是<code>make</code>需要执行的一个行为，可以是一条也可以是多条，可以放在一行也可以放在多行，需要注意的是，每行<code>recipe</code>之前需要包含一个制表符<code>Tab</code>。</p><p>当执行<code>make</code>命令时，如果不指定<code>target</code>，则默认执行<code>Makefile</code>的第一个<code>target</code>。</p><span id="more"></span><p>以下是官方文档中的一份示例，由8个<code>.c</code>源文件和3个<code>.h</code>头文件生成目标文件<code>edit</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o \</span><br><span class="line">       insert.o search.o files.o utils.o</span><br><span class="line">        cc -o edit main.o kbd.o command.o display.o \</span><br><span class="line">                   insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">        cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">        cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">        cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">        cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">        cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">        cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">        cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">        cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">        rm edit main.o kbd.o command.o display.o \</span><br><span class="line">           insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure><p>当执行<code>make</code>命令时，首先进入第一个<code>target</code>，如果<code>target</code>，<code>make</code>会先更新其所有<code>prerequisites</code>，因为<code>prerequisites</code>可能是其他规则的<code>target</code>，所以实际上是一个递归执行的过程，当然，如果该<code>prerequisites</code>不存在，且在<code>Makefile</code>中又没有规则来指定如果生成它，那么就会报错。</p><p>示例中有以下需要注意的点：</p><ol><li><p>一个长行可使用<code>\</code>来将其分隔成多个短行。</p></li><li><p><code>make</code>并不知道<code>recipe</code>是如何工作的，只是在需要更新目标文件时执行指定的<code>recipe</code>。</p></li><li><p><code>clean</code>是一个目标而不是一个文件，且它不是任何<code>target</code>的先决条件，因此<code>make</code>命令不会对它做任何操作，除非指定执行<code>make clean</code>或者<code>clean</code>是第一个目标。</p></li><li><p>像<code>clean</code>这种不仅不是先决条件，本身也不具备先决条件，只为执行指定的操作而设定的目标被称为假目标（<code>Phony Targets</code>），但需要注意的是，如果刚好存在一个名为<code>clean</code>的文件，那么当执行<code>make clean</code>时，<code>make</code>检测到该文件已存在，那么就不会再去执行其<code>recipe</code>，为了避免该情况，可以使用<code>.PHONY</code>来将其声明为一个显式的伪目标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.PHONY: clean</span><br><span class="line">clean</span><br><span class="line">&lt;recipe&gt;...</span><br></pre></td></tr></table></figure></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p><code>Makefile</code>中允许使用变量来简化文件的编写，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">          insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : $(objects)</span><br><span class="line">        cc -o edit $(objects)</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">        cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">        cc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">        cc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">        cc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">        cc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">        cc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">        cc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">        cc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">        rm edit $(objects)</span><br></pre></td></tr></table></figure><p>将所有的<code>.o</code>文件声明为一个<code>objects</code>对象，然后使用<code>$(objects)</code>来使用该变量。</p><h1 id="隐式规则"><a href="#隐式规则" class="headerlink" title="隐式规则"></a>隐式规则</h1><p><code>Makefile</code>中存在一条隐式规则，可以从相应命名的<code>.c</code>文件中自动更新和生成<code>.o</code>文件，因此可以省略其编译语句和<code>.c</code>依赖项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">          insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : $(objects)</span><br><span class="line">        cc -o edit $(objects)</span><br><span class="line"></span><br><span class="line">main.o : defs.h</span><br><span class="line">kbd.o : defs.h command.h</span><br><span class="line">command.o : defs.h command.h</span><br><span class="line">display.o : defs.h buffer.h</span><br><span class="line">insert.o : defs.h buffer.h</span><br><span class="line">search.o : defs.h buffer.h</span><br><span class="line">files.o : defs.h buffer.h command.h</span><br><span class="line">utils.o : defs.h</span><br><span class="line"></span><br><span class="line">.PHONY : clean</span><br><span class="line">clean :</span><br><span class="line">        rm edit $(objects)</span><br></pre></td></tr></table></figure><h1 id="其他风格的Makefile"><a href="#其他风格的Makefile" class="headerlink" title="其他风格的Makefile"></a>其他风格的Makefile</h1><p>当<code>Makefile</code>的目标仅由隐式规则创造时，可以使用另一种<code>Makefile</code>风格样式，就是根据先决条件而不是目标进行分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">objects = main.o kbd.o command.o display.o \</span><br><span class="line">          insert.o search.o files.o utils.o</span><br><span class="line"></span><br><span class="line">edit : $(objects)</span><br><span class="line">        cc -o edit $(objects)</span><br><span class="line"></span><br><span class="line">$(objects) : defs.h</span><br><span class="line">kbd.o command.o files.o : command.h</span><br><span class="line">display.o insert.o search.o files.o : buffer.h</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CMake和Makefile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始学习Git</title>
      <link href="/2023/04/09/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0Git/"/>
      <url>/2023/04/09/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0Git/</url>
      
        <content type="html"><![CDATA[<h2 id="远程仓库配置"><a href="#远程仓库配置" class="headerlink" title="远程仓库配置"></a>远程仓库配置</h2><h3 id="SSH连接Git托管平台"><a href="#SSH连接Git托管平台" class="headerlink" title="SSH连接Git托管平台"></a>SSH连接Git托管平台</h3><ol><li><p>配置用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br></pre></td></tr></table></figure></li><li><p>配置邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>生成ssh文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;自己的邮箱&quot;</span><br></pre></td></tr></table></figure><p>SSH文件存放在用户目录下的.ssh文件夹下，id_rsa为私钥，id_rsa.pub为公钥。</p></li><li><p>配置远程平台ssh</p><p>将公钥id_rsa.pub中代码复制到远程托管平台的SSH管理中</p><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>输出<code>successfully</code>表示ssh连接正常</p></li></ol><span id="more"></span><h3 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h3><h4 id="本地没有Git仓库"><a href="#本地没有Git仓库" class="headerlink" title="本地没有Git仓库"></a>本地没有Git仓库</h4><ol><li><p>克隆远程仓库到当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [远程仓库url]</span><br></pre></td></tr></table></figure></li><li><p>将文件添加并commit到本地仓库</p></li><li><p>将本地仓库的内容push到远程仓库</p></li></ol><h4 id="本地已有Git仓库"><a href="#本地已有Git仓库" class="headerlink" title="本地已有Git仓库"></a>本地已有Git仓库</h4><ol><li><p>初始化本地版本库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>关联远程版本库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure></li></ol><h2 id="Git-基础指令"><a href="#Git-基础指令" class="headerlink" title="Git 基础指令"></a>Git 基础指令</h2><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>用于添加文件或目录到暂存区，支持正则表达式</p><h3 id="git-resotre"><a href="#git-resotre" class="headerlink" title="git resotre"></a>git resotre</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore &lt;filename&gt;</span><br></pre></td></tr></table></figure><p><strong>-W</strong></p><p><strong>worktree</strong></p><p><strong>-S</strong></p><p><strong>–staged</strong></p><p>指定恢复位置，如果不指定，默认为<code>-W</code>参数，即恢复工作区文件到上一次<code>git add </code>或<code>git commit</code> ，指定<code>--staged</code> 将恢复索引，即将文件放回到工作区而不恢复工作区的修改</p><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit </span><br></pre></td></tr></table></figure><p>提交暂存区文件到本地版本库</p><p><strong>-a</strong></p><p><strong>–all</strong></p><p>自动暂存已修改或者已删除的文件，但新添加的文件，由于未受版本库控制，因此不受影响</p><p><strong>-m “<msg>“</strong></p><p><strong>–message&#x3D;<msg></strong></p><p>使用给定的<code>msg</code>作为提交消息，如果给出多个<code>-m</code>，则每个<code>&lt;msg&gt;</code>将作为一个单独的段落，连接起来作为提交消息</p><p>如不指定该参数，在<code>git commit</code>后弹出编辑器要求你输入消息</p><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>查看当前仓库状态，显示有变更的文件</p><p><strong>-s</strong></p><p><strong>–short</strong></p><p>以简短的格式化方式输出消息</p><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>显示暂存区与工作区的差异，不指定文件则默认当前目录下所有文件</p><p><strong>–cached</strong></p><p><strong>–staged</strong></p><p>显示暂存区与上一次提交的差异</p><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>删除指定文件，如果该文件已有修改已经提交到暂存区则无法删除</p><p><strong>-f</strong></p><p><strong>–force</strong></p><p>强制删除该文件，即使该文件已有修改提交到暂存区，暂存区的修改与该文件一起被删除，此时暂存区只有该文件的删除提交</p><p><strong>-r</strong></p><p>允许递归删除（当参数是一个目录时）</p><p><strong>–cached</strong></p><p>删除版本库对该文件的跟踪，此后该文件的所有修改都不再被<code>Git</code>管理，但工作区的文件仍然存在，此时暂存区存在一次删除提交</p><h3 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv &lt;file&gt; &lt;newfile&gt;</span><br></pre></td></tr></table></figure><p>用于移动或重命名一个文件、目录或软连接</p><p><strong>-f</strong></p><p><strong>–force</strong></p><p>即使<code>&lt;newfile&gt;</code>存在，也强制覆盖</p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>查看历史提交记录</p><p><strong>–oneline</strong></p><p>等同于<code>--pretty=oneline</code>  <code>--abbrev-commit</code> 一起使用， 查看历史提交记录的简洁版本</p><p><strong>–graph</strong></p><p>在输出的左侧以图形表示，不能与<code>--no-walk</code> 结合使用</p><p><strong>-<number></strong></p><p><strong>-n <number></strong></p><p><strong>–max-count&#x3D;<number></strong></p><p>限制输出提交记录的最大数量</p><p><strong>–skip&#x3D;<number></strong></p><p>在输出提交记录之前跳过指定条数</p><p><strong>–since&#x3D;<date></strong></p><p><strong>–after&#x3D;<date></strong></p><p>展示在指定日期之后的提交</p><p><strong>–until&#x3D;<date></strong></p><p><strong>–before&#x3D;<date></strong></p><p>展示在指定日期之前的提交</p><p><strong>–author&#x3D;<pattern></strong></p><p><strong>–commiter&#x3D;<pattern></strong></p><p>展示与指定作者&#x2F;提交者相匹配的提交记录，当指定多个时，显示与任意一个匹配的记录</p><p><strong>–grep&#x3D;<pattern></strong></p><p>展示与指定内容相匹配的提交记录，该参数之后查找提交信息中与之匹配的部分</p><h3 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>查看某个文件每一行的最后修改版本和作者</p><h3 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show</span><br></pre></td></tr></table></figure><p>可用于查看某个版本的提交记录，默认为HEAD版本</p><p><strong>–oneline</strong></p><p>等同于<code>--pretty=oneline</code>  <code>--abbrev-commit</code> 一起使用， 查看历史提交记录的简洁版本</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch [&lt;branchname&gt;]</span><br></pre></td></tr></table></figure><p>列出、创建和删除分支，在没有<code>&lt;branchname&gt;</code> 时为列出本地所有分支，在有<code>&lt;branchname&gt;</code> 时为创建新分支</p><p><strong>-f</strong></p><p><strong>–force</strong></p><p>在创建、删除、移动、复制分支时强制操作，在该分支已存在的情况下，如果强制创建，则会恢复该分支到<code>[start-point]</code> </p><p><strong>-d</strong></p><p><strong>-delete</strong></p><p>删除一个分支，该分支必须已经完全合并到其上游分支</p><p><strong>-D</strong></p><p>等同于<code>--delete --force</code></p><p><strong>-m</strong></p><p><strong>–move</strong></p><p>移动或者重命名一个分支</p><p><strong>-M</strong></p><p>等同于<code>--move --force</code></p><p><strong>-c</strong></p><p><strong>–copy</strong></p><p>复制一个分支</p><p><strong>-C</strong></p><p>等同于<code>--copy --force</code></p><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout</span><br></pre></td></tr></table></figure><p>更新工作树文件，如果指定<code>branch</code> ，则会将当前工作树切换到指定分支，如果指定<code>pathspec</code> ,则与<code>git restore</code> 相同</p><p><strong>-b <new-branch></strong></p><p>创建并切换到新分支</p><p><strong>-B</strong></p><p>等同于<code>--force -b</code></p><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure><p>合并两个或更多的分支，<code>git pull</code>命令即是通过此命令实现</p><p>注：当出现冲突时，需手动解决冲突然后重新提交</p><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><p>与远程仓库进行交互，默认为列出当前Git仓库关联的所有远程仓库</p><p><strong>-v</strong></p><p><strong>–verbose</strong></p><p>展示更详细的信息</p><p><strong>add <name> <URL></strong></p><p>添加一个远程仓库，<code>&lt;name&gt;</code> 为指定的别名，<code>&lt;URL&gt;</code> 为指定的远程仓库地址</p><p><strong>rename <oldname> <newname></strong>　</p><p>重命名一个远程仓库</p><p><strong>remove <name></strong></p><p><strong>rm <name></strong> </p><p>删除一个别名为<code>&lt;name&gt;</code> 的远程仓库</p><p><strong>show <name></strong></p><p>展示别名为<code>&lt;name&gt;</code>的远程仓库的详细信息</p><h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;repo&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>从远程仓库获取最新的提交，但不会自动合并到本地仓库中，即本地版本库及工作区均不会发生修改，需要使用<code>git merge &lt;repo/branch&gt;</code> 进行合并</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;repo&gt; &lt;branch&gt;[:&lt;mybranch&gt;]</span><br></pre></td></tr></table></figure><p>相当于<code>git fetch</code>和<code>git merge</code>同时使用，默认是合并到当前分支</p><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;repo&gt; &lt;mybranch&gt;[:&lt;branch&gt;]</span><br></pre></td></tr></table></figure><p>将本地修改推送到远程仓库，如果远程仓库中不存在该分支，则会创建该分支，并将本地分支的代码推送到远程分支上。如果远程分支存在，则会将本地分支的代码合并到远程分支中。</p><p>请注意，使用 <code>git push</code> 命令时，可能需要在之前先运行 <code>git fetch</code> 命令以确保本地仓库中包含远程仓库的最新代码。如果本地仓库中包含与远程仓库冲突的更改，可能会出现推送失败的情况。此时可以运行 <code>git pull</code> 命令以先将远程仓库中的更改合并到本地仓库中，然后再进行推送操作。</p>]]></content>
      
      
      <categories>
          
          <category> Git学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用Next主题</title>
      <link href="/2023/04/07/Hexo%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98/"/>
      <url>/2023/04/07/Hexo%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载Next"><a href="#1-下载Next" class="headerlink" title="1. 下载Next"></a>1. 下载Next</h2><p>这里不使用<code>git</code>而使用<code>curl</code>操作，因为我的整个站点源文件已经托管到<code>GitHub</code>，使用<code>git clone</code>可能会导致仓库嵌套以及配置文件丢失等问题。</p><p>使用<code>curl</code>、<code>tar</code>、<code>wget</code>下载<code>Next</code>主题需进入站点根目录下，然后使用如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir themes/next</span><br><span class="line">curl -s https://api.github.com/repos/theme-next/hexo-theme-next/releases/latest | grep tarball_url | cut -d &#x27;&quot;&#x27; -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure><h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h2><p>打开站点根目录下的<code>_config.yml</code>文件，修改配置信息（冒号后面需要跟空格）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Lu&#x27;s Blog</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;遇事不决，可问春风&#x27; </span><br><span class="line">keywords:</span><br><span class="line">author: Lu</span><br><span class="line">language: zh-CN         #主题语言，在themes/next/language目录下</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27;      #时区</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>另外<code>Next</code>的主题有四种，分别为<code>Muse</code>、<code>Mist</code>、<code>Pices</code>、<code>Gemini</code>，默认为<code>Muse</code>主题，如需修改则到<code>themes/next</code>目录下，修改<code>_confit.yml</code>文件，将需要使用的主题的注释去除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="3-设置菜单"><a href="#3-设置菜单" class="headerlink" title="3. 设置菜单"></a>3. 设置菜单</h2><p>打开<code>themes/next/_config.yml</code>文件，修改<code>menu</code>项如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home #首页</span><br><span class="line">  categories: /categories/ || th #分类</span><br><span class="line">  tags: /tags/ || tags          #标签</span><br><span class="line">  archives: /archives/ || archive #归档</span><br><span class="line">  about: /about/ || user       #关于</span><br><span class="line">  #schedule: /schedule/ || calendar  #时间日历</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap  #站点地图</span><br><span class="line">  #commonweal: /404/ || heartbeat  #腾讯地图</span><br></pre></td></tr></table></figure><p>其中<code>||</code>前是目标链接，后面是图标名称，以上为<code>Next</code>主题中默认添加的，也可以自己添加。</p><p>之后打开<code>themes/next/language/zh-CN.yml</code>文件，在<code>munu</code>标签中进行设置，从而进行中文翻译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益 404</span><br></pre></td></tr></table></figure><p>以上内容在<code>Next</code>主题中已默认设置，新添加<code>Item</code>在该项中添加即可。</p><p>随后在根目录下输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure><p>创建<code>source/categories</code>、<code>source/tags</code>和<code>source/about</code>目录，并在每个目录下生成一个<code>index.md</code>文件，分别打开每个目录下的<code>index.md</code>文件，修改其中内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#source/categories/index.md</span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2023-04-05 22:35:50</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#source/tags/index.md</span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2023-04-05 22:35:34</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#source/about/index.md</span><br><span class="line">---</span><br><span class="line">title: 关于</span><br><span class="line">date: 2023-04-05 22:35:24</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="4-设置建站时间"><a href="#4-设置建站时间" class="headerlink" title="4. 设置建站时间"></a>4. 设置建站时间</h2><p>修改<code>themes/next/_config.yml</code>文件中的<code>since</code>标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  since: 2023-04</span><br></pre></td></tr></table></figure><p>另外，<code>next</code>主题下，默认会有个年份，加起来就会很别扭，可以在<code>themes/next/layout/_partials/footer.swig</code>文件中进行修改</p><img src="/2023/04/07/Hexo%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98/footer.swig.png" class="" title="footer.swig"><p>删去第三行<code>&#123;% endif %&#125;</code>前面的的<code>-</code> 以及<code> &lt;span itemprop=&quot;copyrightYear&quot;&gt;&#123;&#123; copyright_year &#125;&#125;&lt;/span&gt;</code>这一行即可，其他内容也可在此文件中进行修改。</p><h2 id="5-设置网站图标"><a href="#5-设置网站图标" class="headerlink" title="5. 设置网站图标"></a>5. 设置网站图标</h2><p>下载<code>16X16</code>和<code>32x32</code>的图标后，在<code>themes/next/_config.yml</code>中进行<code>favicon</code>项的修改即可，一般仅需修改<code>small</code>和<code>medium</code>项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure><h2 id="6-设置Canvas-Nest动态背景"><a href="#6-设置Canvas-Nest动态背景" class="headerlink" title="6. 设置Canvas Nest动态背景"></a>6. 设置Canvas Nest动态背景</h2><p>创建文件<code>source/_data/footer.swig</code>，并在其中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script color=&quot;0,0,255&quot; opacity=&quot;0.5&quot; zIndex=&quot;-1&quot; count=&quot;99&quot; src=&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>之后修改<code>themes/next/_config.yml</code>文件中<code>custom_file_path</code>项为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Define custom file paths.</span><br><span class="line"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span><br><span class="line">custom_file_path:</span><br><span class="line">  #head: source/_data/head.swig</span><br><span class="line">  #header: source/_data/header.swig</span><br><span class="line">  #sidebar: source/_data/sidebar.swig</span><br><span class="line">  #postMeta: source/_data/post-meta.swig</span><br><span class="line">  #postBodyEnd: source/_data/post-body-end.swig</span><br><span class="line">  footer: source/_data/footer.swig</span><br><span class="line">  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  #style: source/_data/styles.styl</span><br></pre></td></tr></table></figure><h2 id="7-文章末尾添加版权说明"><a href="#7-文章末尾添加版权说明" class="headerlink" title="7. 文章末尾添加版权说明"></a>7. 文章末尾添加版权说明</h2><p>修改<code>themes/next/_config.yml</code>文件中的<code>creative_commons</code>项的<code>post</code>属性为<code>true</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Creative Commons 4.0 International License.</span><br><span class="line"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span><br><span class="line"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="line"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span><br><span class="line"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span><br><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true  # 显示版权说明</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure><p>效果图：</p><img src="/2023/04/07/Hexo%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98/CopyrightDesignSketch.png" class="" title="文章尾版权信息"><h2 id="8-添加访问量统计"><a href="#8-添加访问量统计" class="headerlink" title="8. 添加访问量统计"></a>8. 添加访问量统计</h2><p>修改<code>themes/next/_config.yml</code>文件中<code>busuanzi_count</code>项中<code>enable</code>属性为<code>true</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Show Views / Visitors of the website / page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure><h2 id="9-增加本地搜索功能"><a href="#9-增加本地搜索功能" class="headerlink" title="9. 增加本地搜索功能"></a>9. 增加本地搜索功能</h2><p>使用<code>npm</code>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>之后修改<code>themes/next/_config.yml</code>中<code>local_search</code>项为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Local Search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: manual  #手动触发</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure><h2 id="10-博客提交百度和Google收录"><a href="#10-博客提交百度和Google收录" class="headerlink" title="10. 博客提交百度和Google收录"></a>10. 博客提交百度和Google收录</h2><p>使用<code>npm</code>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>然后修改<code>_config.yml</code>文件新增内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h2 id="11-博文置顶功能"><a href="#11-博文置顶功能" class="headerlink" title="11. 博文置顶功能"></a>11. 博文置顶功能</h2><p>使用<code>npm</code>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>打开<code>themes/next/layout/_macro/post.swig文件</code>，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>之后在需要置顶文章的<code>Front-matter</code>中添加<code>top: true</code>标签即可</p><h2 id="12-使用markdown方式插入图片"><a href="#12-使用markdown方式插入图片" class="headerlink" title="12. 使用markdown方式插入图片"></a>12. 使用markdown方式插入图片</h2><p>使用<code>npm</code>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><p>之后修改<code>_config.yml</code>文件中<code>post_asset_folder</code>属性并新增<code>marked</code>项如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>此时在使用<code>hexo new</code>命令生成新博客文章时，会在文章所在目录下生成一个同名文件夹，将图片放在该文件夹中，直接使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure><p>即可在<code>hexo</code>发布时正常显示图片，但是此时该图片不能在<code>markdown</code>中正常显示，因为<code>markdown</code>中命名方式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% asset_img "image.jpg" "" %}</span><br></pre></td></tr></table></figure><p>所有还需要安装<code>hexo-image-link</code>插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-image-link --save</span><br></pre></td></tr></table></figure><p>此时采用<code>markdown</code>命名格式的图片在<code>hexo</code>发布后仍然能正常显示。</p><h2 id="13-站点配置SSL证书"><a href="#13-站点配置SSL证书" class="headerlink" title="13. 站点配置SSL证书"></a>13. 站点配置SSL证书</h2><p>进入站点所在的<code>GitHub</code>仓库下，找到<code>Settings/Pages/Custom domain</code>配置项，将<code>Enforce HTTPS</code>开启即可。</p><img src="/2023/04/07/Hexo%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98/GitHubPagesHTTPS.png" class="" title="开启Enforce HTTPS"><h2 id="14-解决Next主题侧边中文目录无法跳转"><a href="#14-解决Next主题侧边中文目录无法跳转" class="headerlink" title="14. 解决Next主题侧边中文目录无法跳转"></a>14. 解决Next主题侧边中文目录无法跳转</h2><p>将<code>themes/next/source/js/util.js</code>按照如下进行修改</p><img src="/2023/04/07/Hexo%E4%BD%BF%E7%94%A8Next%E4%B8%BB%E9%A2%98/ChineseToc.png" class="" title="Next主题GitHub仓库中文无法跳转的解决方案">]]></content>
      
      
      <categories>
          
          <category> 博客搭建之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+GitHub搭建个人博客</title>
      <link href="/2023/04/06/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/04/06/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="0-系统环境"><a href="#0-系统环境" class="headerlink" title="0. 系统环境"></a>0. 系统环境</h2><ul><li>Ubuntu 22.04.1 LTS</li></ul><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h2><p>在当前系统下使用以下命令安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><p>使用以下命令检查是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="2-创建GitHub仓库"><a href="#2-创建GitHub仓库" class="headerlink" title="2. 创建GitHub仓库"></a>2. 创建GitHub仓库</h2><p>在<code>GitHub</code>上使用创建仓库，并命名为<code>&lt;username&gt;.github.io</code>，其中<code>username</code>为<code>GitHub</code>用户名。</p><span id="more"></span><h2 id="3-安装node-js"><a href="#3-安装node-js" class="headerlink" title="3. 安装node.js"></a>3. 安装node.js</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></table></figure><p>此命令为从<code>Ubuntu</code>软件源中安装<code>node.js</code>，对应的版本为12.22.9，安装完成后，使用<code>nodejs -v</code> 检查安装版本。</p><p>如果要安装其他版本的<code>node.js</code> ，可以从<code>NodeSource</code> 或者<code>NVM</code> 安装。</p><h2 id="4-安装npm"><a href="#4-安装npm" class="headerlink" title="4. 安装npm"></a>4. 安装npm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure><p>安装完成后使用<code>npm -v</code> 检查安装版本，此处系统对应的版本为8.5.1。</p><p>注：建议在使用<code>npm</code>先运行<code>sudo npm update -g npm</code> 命令更新<code>npm</code> ，确保使用的<code>npm</code> 为最新版本。</p><h2 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5.安装Hexo"></a>5.安装Hexo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后使用<code>hexo -v</code> 检查安装版本，此处对应的版本为4.3.0。</p><h2 id="6-静态部署博客"><a href="#6-静态部署博客" class="headerlink" title="6.静态部署博客"></a>6.静态部署博客</h2><p>使用以下命令初始化一个<code>Hexo</code> 博客项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure><p>该命令为在当前用户下创建一个名为<code>folder</code> 的文件夹作为博客项目根目录，并在该文件夹中初始化一个新的<code>Hexo</code> 博客项目，也可以直接创建文件夹，之后进入文件夹内输入<code>hexo init</code> 初始化项目，接下来使用以下命令进行静态部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>部署完成后，使用以下命令启动服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>此时命令行输出如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO Validating config</span><br><span class="line">INFO Start processing</span><br><span class="line">INFO Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>表示服务器启动成功，在浏览器输入<code>http://localhost:4000/</code>就可以打开新部署的网页，使用<code>Ctrl+C</code>停止运行服务器。</p><h2 id="7-将博客部署到GitHub"><a href="#7-将博客部署到GitHub" class="headerlink" title="7.将博客部署到GitHub"></a>7.将博客部署到GitHub</h2><p>进入项目文件夹根目录内，打开<code>_config.yml</code> 文件，并在文件底部添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: &lt;repoURL&gt;  #你的仓库地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>输入完成后，保存该文件，之后在项目文件夹根目录下，输入以下命令安装<code>Git</code> 部署插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成后，使用以下命令将博客部署到<code>GitHub</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure><p>部署完成后，在浏览器输入以下<code>URL</code>即可成功访问博客主页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://&lt;username&gt;.github.io        #&lt;username&gt;.github.io即为第2步创建的仓库名</span><br></pre></td></tr></table></figure><h2 id="8-解析域名"><a href="#8-解析域名" class="headerlink" title="8.解析域名"></a>8.解析域名</h2><p>打开购买域名网站控制台，添加如下记录</p><img src="/2023/04/06/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/DNSControler.png" class="" title="控制台"><p>图中<code>IP</code>地址可以通过<code>ping flyingfishl.github.io</code> 命令得到，如果<code>IP</code>地址经常变，可以多添加几条<code>@</code>记录</p><p>之后打开本地博客项目文件夹根目录下的的<code>source</code>文件夹，在其中添加<code>CNAME</code> 文件，并在其中输入你的域名然后保存，之后回到博客项目根目录下运行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d    </span><br></pre></td></tr></table></figure><p>之后回到<code>GitHub</code> ，查看<code>CANME</code> 文件是否上传，以及<code>Settings/Pages</code> 中的<code>Custom domain</code>选项是否已设置，如没有则需进行手动设置</p><img src="/2023/04/06/%E4%BD%BF%E7%94%A8Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/GitHubPages.png" class="" title="GitHubPages"><p>之后即可在输入域名进行访问，检查是否配置成功。</p><h2 id="9-Hexo源文件备份和多平台同步方案"><a href="#9-Hexo源文件备份和多平台同步方案" class="headerlink" title="9. Hexo源文件备份和多平台同步方案"></a>9. Hexo源文件备份和多平台同步方案</h2><p>在<code>GitHub</code>上创建一个名为<code>Blog</code>的私有仓库，之后回到本地博客项目根目录，使用<code>git init</code>初始化本地仓库，之后创建<code>.gitignore</code>文件，其中内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">_multiconfig.yml</span><br></pre></td></tr></table></figure><p>在我的系统上，使用<code>git init</code>命令后已经自动生成该文件，如果没有生成该文件，则需要手动创建，之后使用如下命令将本地仓库关联到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add github git@github.com:FlyingFishL/Blog.git</span><br></pre></td></tr></table></figure><p>关联完成后可以使用<code>git remote -v</code>检查是否关联成功，之后使用如下命令将本地文件推送到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;使用本地文件初始化仓库&quot;</span><br><span class="line">git push github main</span><br></pre></td></tr></table></figure><p>此时可以登录<code>GitHub</code> 上查看是否上传，自此备份方案完成。</p><p>如需在另一台电脑上进行博客上传，则在本地已安装<code>node.js</code> +<code>npm</code> +<code>Hexo</code>的环境下，使用<code>git clone</code> 命令下载远程仓库，之后使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>安装<code>git</code>依赖，之后即可使用<code>Hexo</code>进行博文发布。</p><p>需要注意的是，上传博客文章时，需要同步修改<code>Blog</code>仓库并上传到远程仓库。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
